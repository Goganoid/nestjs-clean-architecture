version: "3"

services:
  api:
    build:
      context: ./app
    command: yarn run start:prod
    env_file:
      - ./app/.env
    ports:
      - "6007"
      - 6006:6006
    depends_on:
      - postgres

  postgres:
    image: postgres:14-alpine
    ports:
      - 5433:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=root
      - POSTGRES_DB=spaceship_db

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass REDIS
    volumes:
      - ./.cache:/data

  s3:
    container_name: "${LOCALSTACK_DOCKER_NAME-s3}"
    image: localstack/localstack
    network_mode: bridge
    ports:
      - "4566-4599:4566-4599"
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DEFAULT_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DISABLE_CORS_CHECKS=1
      - DISABLE_CUSTOM_CORS_S3=1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "//var/run/docker.sock:/var/run/docker.sock"
      - "./scripts/localstack:/etc/localstack/init/ready.d"


  tempo_init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo_data:/var/tempo

  tempo:
    container_name: tempo
    image: *tempoImage
    ports:
      - "14268" # jaeger ingest
      - "3200"  # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"  # zipkin
    volumes:
      - ./infra/monitoring/tempo.yml:/etc/tempo.yml
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo.yml
    restart: on-failure
    depends_on:
      - tempo_init

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9095:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:latest
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55679:55679" # zpages extension
    depends_on:
      - "tempo"
      - "prometheus"
    volumes:
      - ./infra/monitoring/otel-collector.yml:/etc/otel-collector.yml
    command:
      - "--config=/etc/otel-collector.yml"
    restart: on-failure

  loki:
    image: grafana/loki:latest
    container_name: loki
    user: "root"
    command: -config.file=/etc/loki/loki.yaml
    ports:
      - "3100:3100" # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./infra/monitoring/loki.yml:/etc/loki/loki.yaml
      - loki_data:/tmp/loki

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    #   - ./data/grafana-data/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      # - ./data/grafana-data/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

volumes:
  grafana_data:
  tempo_data:
  postgres_data:
  mongo_data:
  loki_data:
